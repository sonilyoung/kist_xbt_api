<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.com.stu.main.dao.MainDAO">
	
	
	<!-- 메인사용자정보 -->
	<select id="selectBaselineUserInfo" parameterType="egovframework.com.stu.main.vo.UserStInfo" resultType="egovframework.com.stu.main.vo.UserStInfo">
		SELECT
			T1.STUDENT_NO,
			T1.PROC_CD,
			T1.PROC_YEAR,
			T1.PROC_SEQ,
			T1.MODULE_ID,	
			T2.MODULE_NM,	
			T1.USER_ID,
			T1.USER_NM,
			T1.PROC_NM,
			T1.COMP_NM,
			T1.DEPT_CD,
			T1.DEPT_NM,
			T1.GAIN_SCORE,
			T1.PASS_YN,
			T1.ENDING_PROCESS_DATE,
			T1.EDU_START_DATE,
			T1.EDU_END_DATE,
			T1.ENDING_YN,
			T1.INSERT_DATE,
			T1.INSERT_ID,
			T1.UPDATE_DATE,
			T1.UPDATE_ID
		FROM
			XBT_BASELINE_STUDENT_INFO T1 INNER JOIN XBT_MODULE_INFO_MASTER T2
			ON T1.USER_ID = #{userId} 
			AND T1.MODULE_ID = T2.MODULE_ID 
	</select>	
	
	
	<!-- 일정목록 메뉴목록정보 -->
	<select id="selectScheduleList" parameterType="egovframework.com.stu.main.vo.Schedule" resultType="egovframework.com.stu.main.vo.Schedule">
		<!-- SELECT 
				T1.MENU_NO,
				T1.MENU_URL,
				T1.P_MENU_CD,
				T2.MENU_CD,
				T1.MENU_NAME,
				T1.MENU_URL,
				T1.MENU_LEVEL,
				T1.USE_YN,
				T1.MENU_ORDER,
				'' AS MODULE_ID,
				'' AS MODULE_TYPE,
				'' AS EDU_TYPE
		FROM XBT_STU_MENU_MASTER T1 INNER JOIN XBT_STU_MENU_DETAIL T2
		ON T1.MENU_NO = T2.MENU_CD
		WHERE T2.LANGUAGE_CODE =  #{languageCode}
		AND P_MENU_CD = #{pMenuCd} AND MENU_LEVEL = '0'
		UNION ALL  -->
		SELECT 
				T1.MENU_NO,
				T1.MENU_URL,
				T1.P_MENU_CD,
				T2.MENU_CD,
				T1.MENU_NAME,
				T1.MENU_URL,
				T1.MENU_LEVEL,
				T1.USE_YN,
				T1.MENU_ORDER,
				(SELECT MAX(MODULE_ID) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T2.MENU_CD) AS MODULE_ID,
				(SELECT MAX(MODULE_TYPE) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T2.MENU_CD) AS MODULE_TYPE,
				(SELECT MAX(EDU_TYPE) FROM XBT_BASELINE_EDU_DATE WHERE MENU_CD = T2.MENU_CD) AS EDU_TYPE						
		FROM XBT_STU_MENU_MASTER T1 INNER JOIN XBT_STU_MENU_DETAIL T2
		on T1.MENU_NO = T2.MENU_CD
		where T2.LANGUAGE_CODE =  #{languageCode}
		AND P_MENU_CD = #{pMenuCd}
		AND T2.MENU_CD IN (
 			<!-- SELECT MENU_CD FROM XBT_BASELINE_EDU_DATE WHERE USER_ID = #{userId} AND EDU_DATE = DATE_FORMAT(now(),'%Y%m%d') -->
 			SELECT MENU_CD FROM XBT_BASELINE_EDU_DATE WHERE USER_ID = #{userId}
		)				
	</select>

	

	<!-- 교육정보통계타이틀 -->
	<select id="selectStatisticsTitleList" parameterType="egovframework.com.stu.main.vo.Statistics" resultType="egovframework.com.stu.main.vo.Statistics">
		SELECT 
			PROC_YEAR , 
			PROC_SEQ , 
			STUDY_LVL ,
			TRY_SEQ, 
			TEST_DATE,
			(CASE WHEN PASS_YN = 'Y' THEN 'Pass' ELSE 'Fail' END)AS passYn ,
			GAIN_SCORE,
			(SELECT PASS_SCORE FROM XBT_MODULE_INFO_MASTER T1 WHERE T1.MODULE_ID= T2.MODULE_ID)AS passScore
		FROM XBT_BASELINE_LEARNING T2
		WHERE USER_ID = #{userId}
		GROUP BY MODULE_ID, PROC_CD , PROC_YEAR , PROC_SEQ, STUDY_LVL,TRY_SEQ
		ORDER BY TRY_SEQ DESC, STUDY_LVL	
						
	</select>

	<!-- 교육정보통계데이터 -->
	<select id="selectStatisticsContensList" parameterType="egovframework.com.stu.main.vo.Statistics" resultType="egovframework.com.stu.main.vo.Statistics">
		SELECT 
			PROC_YEAR , PROC_SEQ , STUDY_LVL , TRY_SEQ ,SUM(GAIN_SCORE) AS GAINSCORE
		FROM XBT_BASELINE_LEARNING
		WHERE USER_ID = #{userId}
		GROUP BY MODULE_ID, PROC_CD , PROC_YEAR , PROC_SEQ, TRY_SEQ 
		ORDER BY TRY_SEQ DESC, STUDY_LVL
		LIMIT 5
	</select>	
	
	
	<!-- 오답통계정보데이터 -->
	<select id="selectStatisticsWrongAnswerContentsList" parameterType="egovframework.com.stu.main.vo.Statistics" resultType="egovframework.com.stu.main.vo.Statistics">
		SELECT 
		    COUNT(*) AS TOTAL
		  , COUNT(IF(UNIT_GROUP_CD = 'G000001', 'G000001', NULL)) as firearms
		  , COUNT(IF(UNIT_GROUP_CD = 'G000002', 'G000002', NULL)) as explosives
		  , COUNT(IF(UNIT_GROUP_CD = 'G000003', 'G000003', NULL)) as ammunitions
		  , COUNT(IF(UNIT_GROUP_CD = 'G000004', 'G000004', NULL)) as knife
		  , COUNT(IF(UNIT_GROUP_CD = 'G000005', 'G000005', NULL)) as generalWeapons
		  , COUNT(IF(UNIT_GROUP_CD = 'G000006', 'G000006', NULL)) as gastrointestinalWeapons
		  , COUNT(IF(UNIT_GROUP_CD = 'G000007', 'G000007', NULL)) as toolssuppliesCategory
		  , COUNT(IF(UNIT_GROUP_CD = 'G000008', 'G000008', NULL)) as flammableSubstances
		  , COUNT(IF(UNIT_GROUP_CD = 'G000009', 'G000009', NULL)) as dangerSubstance
		  , COUNT(IF(UNIT_GROUP_CD = 'G000010', 'G000010', NULL)) as Liquid
		  , COUNT(IF(UNIT_GROUP_CD = 'G000013', 'G000013', NULL)) as pass  
		FROM(
			SELECT
				(SELECT UNIT_GROUP_CD FROM XBT_BAG_INFO T1 WHERE T1.BAG_SCAN_ID = T3.BAG_SCAN_ID) AS UNIT_GROUP_CD
			FROM
				XBT_STU_LEARNING_PROGRESSING T3 
			WHERE
				USER_ID = #{userId}
				AND END_YN = 'Y'
		)TOT1
		UNION ALL
		SELECT 
		    COUNT(*) AS TOTAL
		  , ROUND(COUNT(IF(UNIT_GROUP_CD = 'G000001', 'G000001', NULL))/(select count(*) from (select user_id from XBT_STU_LEARNING_PROGRESSING group by user_id)temp)) as firearms
		  , ROUND(COUNT(IF(UNIT_GROUP_CD = 'G000002', 'G000002', NULL))/(select count(*) from (select user_id from XBT_STU_LEARNING_PROGRESSING group by user_id)temp))  as explosives
		  , ROUND(COUNT(IF(UNIT_GROUP_CD = 'G000003', 'G000003', NULL))/(select count(*) from (select user_id from XBT_STU_LEARNING_PROGRESSING group by user_id)temp))  as ammunitions
		  , ROUND(COUNT(IF(UNIT_GROUP_CD = 'G000004', 'G000004', NULL))/(select count(*) from (select user_id from XBT_STU_LEARNING_PROGRESSING group by user_id)temp))  as knife
		  , ROUND(COUNT(IF(UNIT_GROUP_CD = 'G000005', 'G000005', NULL))/(select count(*) from (select user_id from XBT_STU_LEARNING_PROGRESSING group by user_id)temp))  as generalWeapons
		  , ROUND(COUNT(IF(UNIT_GROUP_CD = 'G000006', 'G000006', NULL))/(select count(*) from (select user_id from XBT_STU_LEARNING_PROGRESSING group by user_id)temp))  as gastrointestinalWeapons
		  , ROUND(COUNT(IF(UNIT_GROUP_CD = 'G000007', 'G000007', NULL))/(select count(*) from (select user_id from XBT_STU_LEARNING_PROGRESSING group by user_id)temp))  as toolssuppliesCategory
		  , ROUND(COUNT(IF(UNIT_GROUP_CD = 'G000008', 'G000008', NULL))/(select count(*) from (select user_id from XBT_STU_LEARNING_PROGRESSING group by user_id)temp))  as flammableSubstances
		  , ROUND(COUNT(IF(UNIT_GROUP_CD = 'G000009', 'G000009', NULL))/(select count(*) from (select user_id from XBT_STU_LEARNING_PROGRESSING group by user_id)temp))  as dangerSubstance
		  , ROUND(COUNT(IF(UNIT_GROUP_CD = 'G000010', 'G000010', NULL))/(select count(*) from (select user_id from XBT_STU_LEARNING_PROGRESSING group by user_id)temp))  as Liquid
		  , ROUND(COUNT(IF(UNIT_GROUP_CD = 'G000013', 'G000013', NULL))/(select count(*) from (select user_id from XBT_STU_LEARNING_PROGRESSING group by user_id)temp))  as pass  		    
		FROM(
			SELECT
				(SELECT UNIT_GROUP_CD FROM XBT_BAG_INFO T1 WHERE T1.BAG_SCAN_ID = T3.BAG_SCAN_ID) AS UNIT_GROUP_CD
			FROM
				XBT_STU_LEARNING_PROGRESSING T3 
			WHERE
				T3.ACTION_DIV != T3.USER_ACTION_DIV 
				AND END_YN = 'Y'
		)TOT2
		UNION ALL
		SELECT 
		    COUNT(*) AS TOTAL
		  , COUNT(IF(UNIT_GROUP_CD = 'G000001', 'G000001', NULL)) as firearms
		  , COUNT(IF(UNIT_GROUP_CD = 'G000002', 'G000002', NULL)) as explosives
		  , COUNT(IF(UNIT_GROUP_CD = 'G000003', 'G000003', NULL)) as ammunitions
		  , COUNT(IF(UNIT_GROUP_CD = 'G000004', 'G000004', NULL)) as knife
		  , COUNT(IF(UNIT_GROUP_CD = 'G000005', 'G000005', NULL)) as generalWeapons
		  , COUNT(IF(UNIT_GROUP_CD = 'G000006', 'G000006', NULL)) as gastrointestinalWeapons
		  , COUNT(IF(UNIT_GROUP_CD = 'G000007', 'G000007', NULL)) as toolssuppliesCategory
		  , COUNT(IF(UNIT_GROUP_CD = 'G000008', 'G000008', NULL)) as flammableSubstances
		  , COUNT(IF(UNIT_GROUP_CD = 'G000009', 'G000009', NULL)) as dangerSubstance
		  , COUNT(IF(UNIT_GROUP_CD = 'G000010', 'G000010', NULL)) as Liquid
		  , COUNT(IF(UNIT_GROUP_CD = 'G000013', 'G000013', NULL)) as pass  
		FROM(
			SELECT
				(SELECT UNIT_GROUP_CD FROM XBT_BAG_INFO T1 WHERE T1.BAG_SCAN_ID = T3.BAG_SCAN_ID) AS UNIT_GROUP_CD
			FROM
				XBT_STU_LEARNING_PROGRESSING T3 
			WHERE
				USER_ID = #{userId}
				AND T3.ACTION_DIV != T3.USER_ACTION_DIV 
				AND END_YN = 'Y'
		)TOT3    

	</select>		
</mapper>